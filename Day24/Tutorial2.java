/* Maximum AND Value
Given an array arr[] of N positive elements. The task is to find the Maximum AND Value generated by any pair(arri, arrj) from the array
such that i != j.
Note: AND is bitwise '&' operator.

Example 1:
Input:  N = 4,  arr[] = {4, 8, 12, 16}
Output: 8
Explanation: Pair (8,12) has the Maximum AND Value 8.

Example 2:
Input:  N = 4,  arr[] = {4, 8, 16, 2}
Output: 0
Explanation: Any two pairs of the array has Maximum AND Value 0.  */


// Bruteforce Approach [not acceptable]
class Solution {
    // Time: O(n ^ 2)       Space: O(1)
    public static int maxAND(int[] arr, int N) {
        int res = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                res = Integer.max(res, arr[i] & arr[j]);
            }
        }
        return res;
    }
}
--------------------------------------------------------------
// Efficient Approach
class Solution {
    // Time: O(17 * n)        Space: O(1)
    public static int maxAND(int[] arr, int N) {
        int res = 0;
        for (int bit = 16; bit >= 0; bit--) {
            int count = check(res | (1 << bit), arr, N);
            if (count >= 2) {
                res |= (1 << bit);
            }
        }
        return res;
    }
    private static int check(int pattern, int[] arr, int n) {
        int count = 0;
        for (int i = 0; i < n; i++) {
            if ((arr[i] & pattern) == pattern) {
                count++;
            }
        }
        return count;
    }
}

